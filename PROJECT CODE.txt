Include Irvine32.inc

Str_copy PROTO, source:PTR BYTE, target:PTR BYTE
moveToEAX PROTO, saleB:ptr byte, sized:DWORD


.data
;;;;;;;;;;filing variables;;;;;;;;;;;;;;;

filename byte "adminFile.txt",0
filehandle DD ?
buffersize=100
buffer byte buffersize dup(?)

adminFile byte "adminFile.txt",0
salesFile byte "salesFile.txt",0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

msg1 byte   "					      Enter User Name:",0 
msg2 byte   "					      Enter Four digit Passcode:",0

;;;;;;;;;;order details;;;;;;;;;;;;;

ordernum DD 0
itemcount dw 0
itemcountmsg byte " - Total items: ",0

cartsize=1000
cart byte cartsize dup(?)
cartlength DWORD 0
quantity DD 0

totalsalesize=5000
totalsales BYTE 5000 DUP (?)
totalsaleslength DWORD 0
filenextline BYTE "--------------------",0ah,0dh,0
salesfilename BYTE "Total orders of the day.txt",0
totalsalesfilehandle DWORD ?

orderAgain byte " - Enter 1 to take another order",13,10," - Enter any key to signOut",13,10,0
ordernummsg byte 13,10,"					            Order # ",0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;admin details;;;;;;;;;;;;;;;

user byte   20 dup(?)
checku byte 20 dup(?)
usersize DD ?

passcode byte 10 dup(?)
checkp byte 10 dup(?)
passsize DD ?

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


totalSale DD 0
salesSize DD 0

takinginput byte 13,10," >>> ",0

signInCongrats byte 13,10,"				  ~~~~~~~~~~~~You Have SignIn Successfully~~~~~~~~~~~~",0
signUpCongrats byte 13,10,"				  ~~~~~~~~~~~~You Have SignUp Successfully~~~~~~~~~~~~",0

    welcome BYTE '					   WELCOME BON APPETIT CONTINENTAL HOTEL',0dh,0ah,0

  stringmenu BYTE ' Menu:',0dh,0ah
             BYTE 13,10,'    Enter 1 - Eastern food ',0dh,0ah
             BYTE '    Enter 2 - Chinese food ',0dh,0ah
             BYTE '    Enter 3 - Fast food ',0dh,0ah
             BYTE '    Enter 4 - Drinks ',0dh,0ah
             BYTE '    Enter 5 - Dessert ',0dh,0ah
             BYTE '    Enter 6 - Exit ',0dh,0ah,0

    string1  BYTE '    Enter 1 - Biryani                = Rs 100 per plate   ',0dh,0ah
             BYTE '    Enter 2 - Karahi                 = Rs 90  per plate   ',0dh,0ah
             BYTE '    Enter 3 - Tikka                  = Rs 70  per plate   ',0dh,0ah
             BYTE '    Enter 4 - Malai Boti Roll        = Rs 85  per plate   ',0dh,0ah
             BYTE '    Enter 5 - Exit ',0dh,0ah,0
    price1 DWORD 100,90,70,85

  stringroti BYTE '    Enter 1 - Naan                   = Rs 10              ',0dh,0ah
             BYTE '    Enter 2 - Roti                   = Rs 05              ',0dh,0ah
             BYTE '    Enter 3 - Exit ',0dh,0ah,0
    priceroti DWORD 10,05

    string2  BYTE '    Enter 1 - Egg Fried Rice         = Rs 150 per plate   ',0dh,0ah
             BYTE '    Enter 2 - Chicken Rice           = Rs 165 per plate   ',0dh,0ah
             BYTE '    Enter 3 - Chicken Macaroni        = Rs 95  per plate   ',0dh,0ah
             BYTE '    Enter 4 - Chicken Shashlik        = Rs 80  per plate   ',0dh,0ah
             BYTE '    Enter 5 - Exit ',0dh,0ah,0
   price2 DWORD 150,165,95,80

    string3  BYTE '    Enter 1 - Zinger Burger          = Rs 100 per item    ',0dh,0ah
             BYTE '    Enter 2 - Chicken Pizza          = Rs 150 per item    ',0dh,0ah
             BYTE '    Enter 3 - Fries                  = Rs 50  per item    ',0dh,0ah
             BYTE '    Enter 4 - Chicken Shawarma       = Rs 95  per item    ',0dh,0ah
             BYTE '    Enter 5 - Exit ',0dh,0ah,0
    price3 DWORD 100,150,50,95

    string4  BYTE '    Enter 1 - Sprite                 = Rs 90 (1.5    l)   ',0dh,0ah
             BYTE '    Enter 2 - Coca Cola              = Rs 90 (1.5    l)   ',0dh,0ah
             BYTE '    Enter 3 - Sting                  = Rs 65 (500   ml)   ',0dh,0ah
             BYTE '    Enter 4 - Juice                  = Rs 70 (250   ml)   ',0dh,0ah
             BYTE '    Enter 5 - Exit ',0dh,0ah,0
    price4 DWORD 90,90,65,70

    string5  BYTE '    Enter 1 - Gajar ka halwa         = Rs 155      500g   ',0dh,0ah
             BYTE '    Enter 2 - Brownie                = Rs 145     3 pcs   ',0dh,0ah
             BYTE '    Enter 3 - Falooda                = Rs 75  per piece   ',0dh,0ah
             BYTE '    Enter 4 - Ice-cream              = Rs 60  per piece   ',0dh,0ah
             BYTE '    Enter 5 - Exit ',0dh,0ah,0
    price5 DWORD 155,145,75,60

    quantitymsg BYTE '    Quantity:     ',0

	stringchoice  BYTE ' Enter 1- To continue',0dh,0ah
             BYTE ' Enter 2 - Exit ',0dh,0ah,0

    billing BYTE  '					      Total Bill:   Rs ',0    
	bill DWORD 0

empty byte buffersize dup(?)
line byte 13,10,"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",13,10,0
dishesmsg byte "					          ~~Dishes~~",0


;;;;;;;;;;;;;after logout;;;;;;;;;;;;;;;;

summarymsg byte 13,10,"					~~~~~~~~~~~~ Summary ~~~~~~~~~~~~",13,10,0
totalordermsg byte 13,10,"Total Orders: ",0
totalsalemsg byte 13,10,"Total sales: ",0
largestsalemsg byte 13,10,"Biggest sale of the day: ",0
smallestsalemsg byte 13,10,"Smallest sale of the day: ",0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

largestsale DD 0
smallestsale DD 0

.code
main proc


mov eax,white+4*16
call settextcolor
call clrscr


mov ordernum,1

above:
call clrscr
;;;;;;;;;clearing user and passcode var;;;;;;;;;;;;;

INVOKE Str_copy, addr empty,addr user
INVOKE Str_copy, addr empty,addr passcode

;;;;;;;;;;;;;;;;;;;;;;;;;;;



;;;;;;;;locates the cursor;;;;;;;;

mov dh,4			;row
mov dl,7			;column
call gotoxy

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


mov edx,offset line
call writestring
call crlf
;;;;;;;;;;prints msg1;;;;;;;;;;;

mov edx,offset msg1
call writestring			

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



;;;;;;;reads the username entered;;;;;;;;;;

mov edx,offset user
mov ecx,lengthof user
call readstring
mov usersize,eax

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;writes msg2;;;;;;;;;;;;;;;;;;;

mov edx,offset msg2
call writestring

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



;;;;;;;;;;;;reads passcode;;;;;;;;;;;;;;;;;;

mov edx,offset passcode
mov ecx,lengthof passcode
call readstring
mov passsize,eax

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

mov edx,offset line
call writestring
call crlf

;;;;;;;;;;;filing checks for admin;;;;;;;;;;;;;

INVOKE Str_copy, ADDR adminFile,ADDR filename

call openAdminFile
cmp eax,0ffffffffh
jz signup

call readAdminFile

mov edi,offset buffer
mov esi,edi
mov ecx,lengthof buffer
mov al,'/'
cld
repne scasb

jnz slasherror
push edi

sub edi,2

sub esi,edi
neg esi
mov ecx,esi
inc ecx

ll1:
	mov al,[edi]
	mov checku[esi],al
	dec esi
	dec edi
loop ll1

outty:
pop edi
cld
mov esi,edi
mov edi,3
mov ecx,4

outtyy:
	lodsb
	mov checkp[edi],al
	dec edi
loop outtyy
add edi,3

call closeAdminFile
jmp checkingu

slasherror:
	exit
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;signup;;;;;;;;;;;;;;;

signup:
	INVOKE Str_copy, ADDR user, addr buffer
	mov esi,usersize
	mov edi,3

	mov buffer[esi],'/'
	inc esi

	mov ecx,4
	g1:
		mov bl,passcode[edi]
		mov buffer[esi],bl
		inc esi
		dec edi
	loop g1	
	
	call createAdminFile
	call writeAdminFile
	call closeAdminFile
	mov edx,offset signUpCongrats
	jmp start1

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



;;;;;;;;;;username check;;;;;;;;;;;;;;;

checkingu:
	mov edi,offset checku
	mov esi,offset user
	mov ecx,usersize
	repe cmpsb
	je start0

	jmp above
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;check passcode;;;;;;;;;;;;;;;;;;;;

start0:
	mov edi,offset checkp
	mov esi,offset passcode
	mov ecx,4
	repe cmpsb
	mov edx,offset signInCongrats

	je start1

	jmp above

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;print congrats msg;;;;;;;;;;;;;;;;;;;;;;

start1:

call writestring 
call readchar
mov eax,black+lightcyan*16
call settextcolor
call clrscr

mov edx,offset line
call writestring

call Crlf
mov edx,OFFSET welcome
call WriteString

mov edx,offset line
call writestring

L1:
	call crlf
    mov edx,OFFSET  stringmenu
    call WriteString
	
	mov edx,offset takinginput
	call writestring

    call ReadDec

	call clrscr
	call crlf
	
	mov edx,offset dishesmsg
	call writestring

	mov edx,offset line
	call writestring
	call crlf

    cmp eax,1      ; main menu item list
    je L2
    cmp eax,2
    je L3
    cmp eax,3
    je L4
    cmp eax,4
    je L5
    cmp eax,5
    je L6
    jmp last

    L2: 
		call  Eastern       ; calling procedures depends on what user enters from the main menu list
        jmp L7

    L3: 
		call Chinese
        jmp L7
    L4: 
		call FastFood
        jmp L7
    L5: 
		call Drinks
        jmp L7
    L6: 
		call Dessert

    L7: 
		mov edx,OFFSET stringchoice 
        call WriteString
        
		mov edx,offset takinginput
		call writestring
        
		call ReadDec
        
		call clrscr
        cmp eax,1           ; if user want to continue then jump to L1
        je L1

    last:                    
		call Crlf
        call Crlf
        call clrscr

		mov edx,offset line
		call writestring

		mov edx,offset ordernummsg
		call writestring

		mov eax,ordernum
		call writedec

		call crlf
		call crlf

		mov edx,offset itemcountmsg
		call writestring
		
		mov eax,0
		mov ax,itemcount
		call writedec

		call crlf
		call crlf

		mov edx,OFFSET cart
		call writestring

		call crlf
		call crlf

		mov edx,OFFSET billing
        call WriteString

        mov eax,bill        
        call WriteDec       ; prints the bill

		call crlf
		mov edx,offset line
		call writestring

		;........................

		cmp smallestsale,0
		jnz checkkaro
		mov smallestsale,eax

		checkkaro:

		cmp largestsale,eax
		jge sahi
		mov largestsale,eax

		sahi:
			cmp smallestsale,eax
			jle sahi1
			mov smallestsale,eax

			sahi1:
		;.............................

		call Crlf			; next line
        call Crlf

		call readingSalesFiling
	
		mov eax,bill
		add totalSale,eax
		mov eax,totalSale

		updatingsalesSize:
			cmp eax,9
			jg twodigit
			mov salesSize,1
			jmp bas

			twodigit:
				cmp eax,99
				jg threedigit
				mov salesSize,2
				jmp bas

				threedigit:
					cmp eax,999
					jg fourdigit
					mov salesSize,3
					jmp bas

					fourdigit:
						cmp eax,9999
						jg fivedigit
						mov salesSize,4
						jmp bas

						fivedigit:
							cmp eax,99999
							jg sixdigit
							mov salesSize,5
							jmp bas

							sixdigit:
								mov salesSize,6
		
			bas:

		call writeSalesFile

		mov edx,offset orderAgain
        call writestring

		mov edx,offset takingInput
		call writestring
		call readdec

		cmp eax,1
		jne endd
		mov bill,0
		inc ordernum

		call cleanCartItem
		call clrscr

		jmp L1
		
		endd:
		call savetotalcart
			call clrscr
			call crlf
			 
			mov edx,offset line
			call writestring

			mov edx,offset summarymsg
			call writestring

			mov edx,offset totalordermsg
			call writestring
			mov eax,ordernum
			call writedec

			mov edx,offset totalsalemsg
			call writestring
			mov eax,totalSale
			call writedec

			mov edx,offset largestsalemsg
			call writestring
			mov eax,largestsale
			call writedec

			mov edx,offset smallestsalemsg
			call writestring
			mov eax,smallestsale
			call writedec

			call crlf
			
			mov edx,OFFSET totalsales
			call writestring
			call savetotalsalestofile
			
			call crlf
			call crlf
			mov edx,offset line
			call writestring


call crlf
call crlf

	exit
main endp


;;;;;;;;;;;;;;;;;;sales filing;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
readingSalesFiling PROC

INVOKE Str_copy, addr salesFile,addr filename

		;;;;;;;;;;;;;;;;cleaning buffer;;;;;;;;;;;;;;;;;;;;;;;

		xor  bx,bx
		WipeClean:
			 mov  [byte ptr buffer + bx], 0
			 inc  bx
			 cmp  bx, 100
			 jb   WipeClean

		;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

		call openAdminFile
		call readAdminFile
		mov salesSize,eax
		call closeAdminFile

		INVOKE moveToEAX,offset buffer,salesSize

ret
readingSalesFiling ENDP

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;clear cart and items;;;;;;;;;;;;

cleanCartItem PROC
call savetotalcart
mov itemcount,0
mov cartlength,0

xor  bx,bx
WipeCleans:
		mov  [byte ptr cart + bx], 0
		inc  bx
		cmp  bx, 1000
		jb   WipeCleans

ret
cleanCartItem ENDP
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;; saving cart to total sales ;;;;;;;;;;;;;;;;;;;;;;;;;;;
savetotalcart PROC
push eax

mov esi, OFFSET filenextline ;22 bytes
mov edi, OFFSET totalsales
add edi,totalsaleslength
mov ecx, 22
l1:
movsb ;;;;;; moving dashes, spaces and newline
loop l1
add totalsaleslength,22

;;;;;;;;;;;;;;;;
mov esi, OFFSET cart
mov edi, OFFSET totalsales
add edi,totalsaleslength


mov ecx, cartlength
mov eax,ecx
l2:
movsb
loop l2
add totalsaleslength, eax

mov esi, OFFSET filenextline
movsb

pop eax
ret
savetotalcart ENDP
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;; save sales of the day to file ;;;;;;;;;;;;;
savetotalsalestofile PROC
push edx

mov edx, OFFSET salesfilename
call CreateOutputFile
mov totalsalesfilehandle,eax

mov edx, OFFSET totalsales
mov ecx, totalsaleslength
call WriteToFile


pop edx
ret
savetotalsalestofile ENDP
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;move buffer to eax;;;;;;;;;;;;;;;;;

moveToEAX PROC, saleB:ptr byte,sized: DWORD

mov esi,offset buffer
mov ch,0

convert:
	mov al,[esi]
	sub al,48
	movzx eax,al
	mov ebx,10

mov ecx,salesSize
dec ecx

next:
	inc esi
	mul ebx
	mov dl,[esi]
	sub dl,48
	movzx edx,dl
	add eax,edx
	cmp ecx,0
	jz bahar
loop next

bahar:

ret
moveToEAX ENDP

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;writing sales file;;;;;;;;;;;;;;;;;;;;;;;;

writeSalesFile PROC

		;;;;;;;;;;;;;;;;cleaning buffer;;;;;;;;;;;;;;;;;;;;;;;

		;xor  bx,bx
		;WipeClean:
		;	 mov  [byte ptr buffer + bx], 0
		;	 inc  bx
		;	 cmp  bx, 100
		;	 jb   WipeClean

		;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

mov esi,offset buffer
add esi,salesSize
dec esi

mov eax,totalSale
mov ebx,0
mov ecx,salesSize

convert:
	shrd bx,ax,4
	shr bx,12
	cmp bl,0Ah
	jge diff

	add bl,48
	jmp agayy

	diff:
		add bl,55
	agayy:
		mov [esi],bl
		dec esi
		shr eax,4
		mov ebx,0

loop convert

call createAdminFile
call writeAdminFile
call closeAdminFile

ret
writeSalesFile ENDP


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;; add items to cart ;;;;;;;;;;;;;
addtocart PROC

;every line is 60 bytes long
;every dish name is after 14 bytes

inc itemcount
mov quantity,eax

add esi, 14
mov edi, OFFSET cart
add edi, cartlength

mov al,"-"
mov [edi],al
inc edi

mov ecx,46
l1:
	mov al,[esi]
	mov [edi],al
	add esi,1
	add edi,1
loop l1

sub edi,2
mov ecx,8
l2:
	mov al," "
	mov [edi],al
	inc edi
loop l2

mov eax,quantity
add eax,48
mov [edi],eax

inc edi
mov eax,0dh
mov [edi],eax
inc edi
mov eax,0ah
mov [edi],eax

add cartlength,56

ret
addtocart ENDP

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



;1-------------------------------------------------------------
 Eastern PROC
         mov edx,OFFSET string1
         call WriteString

		 mov edx,offset takinginput
		 call writestring
       
         call ReadDec
         call Crlf
       
         cmp eax,1
         je L1
         cmp eax,2
         je L2
         cmp eax,3
         je L3
         cmp eax,4
         je L4
         cmp eax,5
         jmp last
 
 L1: 
	 mov edx,OFFSET quantitymsg
     call WriteString
     call ReadDec
     call Crlf
     mov ecx,eax
     mov ebx,[price1]      ; price1 is array contains price of eastern foods

     L11:                   ; no of quantitymsg times a loop L11 runs           
        add bill,ebx            ; add price into bill
        loop L11

     mov esi, OFFSET string1
	 ;call dumpregs
     call addtocart
     jmp last

 L2: mov edx,OFFSET quantitymsg
     call WriteString
     call ReadDec
     call Crlf
     mov ecx,eax
     mov ebx,[price1 + 4]
     L22:
         add bill,ebx
         loop L22
     
     mov esi, OFFSET string1
     add esi,60
     call addtocart

     call NaanRoti
     jmp last

 L3: mov edx,OFFSET quantitymsg
     call WriteString
     call ReadDec
     call Crlf
     mov ecx,eax
     mov ebx,[price1 + 8]

     L33:
         add bill,ebx
         loop L33

     

     mov esi, OFFSET string1
     add esi,120
     call addtocart

     call NaanRoti
     jmp last
	
 L4: mov edx,OFFSET quantitymsg
     call WriteString
     call ReadDec
     call Crlf
     mov ecx,eax
     mov ebx,[price1 + 12]
     L44:
         add bill,ebx
         loop L44
     mov esi, OFFSET string1
     add esi,180
     call addtocart

     call NaanRoti

     
last:
ret
 Eastern ENDP

;--------------------------------------------
NaanRoti PROC
 
        mov edx,OFFSET  stringroti
        call WriteString

		mov edx,offset takinginput
		call writestring

        call ReadDec
    
        cmp eax,1
        je L1
        cmp eax,2
        je L2
        jmp last
     L1:
        mov ebx,[priceroti]    ; buuffer3 is array contains price of Naan and roti
        mov edx,OFFSET quantitymsg
        call WriteString
        call ReadDec
        call Crlf
        mov ecx,eax
        L11:
          add bill,ebx
          loop L11
	mov esi, OFFSET stringroti
     call addtocart
       jmp last
     L2:
        mov ebx,[priceroti + 4]
        mov edx,OFFSET quantitymsg
        call WriteString
        call ReadDec
        call Crlf
        mov ecx,eax
        L22:
          add bill,ebx
          loop L22

	mov esi, OFFSET stringroti
     add esi,60
     call addtocart
last:
ret
NaanRoti ENDP

;2------------------------------------------------------------
Chinese PROC
         mov edx,OFFSET string2
         call WriteString

		 mov edx,offset takinginput
		 call writestring

         call ReadDec
         call Crlf
       
         cmp eax,1
         je L1
         cmp eax,2
         je L2
         cmp eax,3
         je L3
         cmp eax,4
         je L4
         cmp eax,5
         jmp last

 ; price of 1st,2nd,.. item of Chinese menu is on 1st,2nd.. index of buffer5 respectively
 ; same for all other menus

 L1: mov edx,OFFSET quantitymsg
     call WriteString
     call ReadDec
     mov ecx,eax
     mov ebx,[price2]   
     L11:
        add bill,ebx
        loop L11

     mov esi, OFFSET string2
      call addtocart
     jmp last
 L2: mov edx,OFFSET quantitymsg
     call WriteString
     call ReadDec
     mov ecx,eax
     mov ebx,[price2 + 4]
     L22:
         add bill,ebx
         loop L22

     mov esi, OFFSET string2
     add esi,60
     call addtocart

     jmp last
 L3: mov edx,OFFSET quantitymsg
     call WriteString
     call ReadDec
     call Crlf
     mov ecx,eax
     mov ebx,[price2 + 8]
     L33:
         add bill,ebx
         loop L33

     mov esi, OFFSET string2
     add esi,120
     call addtocart

     jmp last
 L4: mov edx,OFFSET quantitymsg
     call WriteString
     call ReadDec
     call Crlf
     mov ecx,eax
     mov ebx,[price2 + 12]
     L44:
         add bill,ebx
         loop L44

     mov esi, OFFSET string2
     add esi,180
     call addtocart

last:

ret
Chinese ENDP

;3--------------------------------------------------------
FastFood PROC
         mov edx,OFFSET string3
         call WriteString
         
		 mov edx,offset takinginput
		 call writestring

		 call ReadDec
         call Crlf
        
         cmp eax,1
         je L1
         cmp eax,2
         je L2
         cmp eax,3
         je L3
         cmp eax,4
         je L4
         cmp eax,5
         jmp last
 
 L1: 
	 mov edx,OFFSET quantitymsg
     call WriteString
     call ReadDec
     call Crlf
     mov ecx,eax
     mov ebx,[price3]
     L11:
        add bill,ebx
        loop L11

     mov esi, OFFSET string3
     call addtocart

     jmp last
 L2: mov edx,OFFSET quantitymsg
     call WriteString
     call ReadDec
     call Crlf
     mov ecx,eax
     mov ebx,[price3 + 4]
     L22:
         add bill,ebx
         loop L22

     mov esi, OFFSET string3
     add esi,60
     call addtocart

     jmp last
 L3: mov edx,OFFSET quantitymsg
     call WriteString
     call ReadDec
     call Crlf
     mov ecx,eax
     mov ebx,[price3 + 8]
     L33:
         add bill,ebx
         loop L33

     mov esi, OFFSET string3
     add esi,120
     call addtocart

     jmp last
 L4: mov edx,OFFSET quantitymsg
     call WriteString
     call ReadDec
     call Crlf
     mov ecx,eax
     mov ebx,[price3 + 12]
     L44:
         add bill,ebx
         loop L44

     mov esi, OFFSET string3
     add esi,180
     call addtocart

last:
ret
FastFood ENDP
    
;4---------------------------------------------------------
Drinks PROC
         mov edx,OFFSET string4
         call WriteString
         
		 mov edx,offset takinginput
		 call writestring

		 call ReadDec
         call Crlf
         
         cmp eax,1
         je L1
         cmp eax,2
         je L2
         cmp eax,3
         je L3
         cmp eax,4
         je L4
         cmp eax,5
         jmp last
 L1: mov edx,OFFSET quantitymsg
     call WriteString
     call ReadDec
     call Crlf
     mov ecx,eax
     mov ebx,[price4]
     L11:
        add bill,ebx
        loop L11

     mov esi, OFFSET string4
     call addtocart

     jmp last
 L2: mov edx,OFFSET quantitymsg
     call WriteString
     call ReadDec
     call Crlf
     mov ecx,eax
     mov ebx,[price4 + 4]
     L22:
         add bill,ebx
         loop L22

     mov esi, OFFSET string4
     add esi,60
     call addtocart

     jmp last
 L3: mov edx,OFFSET quantitymsg
     call WriteString
     call ReadDec
     call Crlf
     mov ecx,eax
     mov ebx,[price4 + 8]
     L33:
         add bill,ebx
         loop L33

     mov esi, OFFSET string4
     add esi,120
     call addtocart

     jmp last
 L4: mov edx,OFFSET quantitymsg
     call WriteString
     call ReadDec
     call Crlf
     mov ecx,eax
     mov ebx,[price4 + 12]
     L44:
         add bill,ebx
         loop L44

     mov esi, OFFSET string4
     add esi,180
     call addtocart

last:
ret
Drinks ENDP

;5---------------------------------------------------------
Dessert PROC
         mov edx,OFFSET string5
         call WriteString
         
		 mov edx,offset takinginput
		 call writestring
		 
		 call ReadDec
         call Crlf
        
         cmp eax,1
         je L1
         cmp eax,2
         je L2
         cmp eax,3
         je L3
         cmp eax,4
         je L4
         cmp eax,5
         jmp last
 L1: mov edx,OFFSET quantitymsg
     call WriteString
     call ReadDec
     call Crlf
     mov ecx,eax
     mov ebx,[price5]
     L11:
        add bill,ebx
        loop L11

     mov esi, OFFSET string5
     call addtocart

     jmp last
 L2: mov edx,OFFSET quantitymsg
     call WriteString
     call ReadDec
     call Crlf
     mov ecx,eax
     mov ebx,[price5 + 4]
     L22:
         add bill,ebx
         loop L22

     mov esi, OFFSET string5
     add esi,60
     call addtocart

     jmp last
 L3: mov edx,OFFSET quantitymsg
     call WriteString
     call ReadDec
     mov ecx,eax
     call Crlf
     mov ebx,[price5+ 8]
     L33:
         add bill,ebx
         loop L33

     mov esi, OFFSET string5
     add esi,120
     call addtocart

     jmp last
 L4: mov edx,OFFSET quantitymsg
     call WriteString
     call ReadDec
     call Crlf
     mov ecx,eax
     mov ebx,[price5 + 12]
     L44:
         add bill,ebx
         loop L44

     mov esi, OFFSET string5
     add esi,180
     call addtocart


last:


ret
Dessert ENDP


;;;;;;;;;;creating admin file;;;;;;;;;;;;;;;;

createAdminFile PROC

mov edx,offset filename
call CreateOutputFile
mov filehandle,eax

ret
createAdminFile ENDP

;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;reading admin file;;;;;;;;

readAdminFile PROC

mov eax,filehandle
mov edx,offset buffer
mov ecx,buffersize
call ReadFromFile

ret
readAdminFile ENDP

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;open Admin File;;;;;;;;;;

openAdminFile PROC

mov edx,offset filename
call OpenInputFile
mov filehandle,eax

ret
openAdminFile ENDP

;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;close admin file;;;;;;;;;;;;

closeAdminFile PROC

mov eax,filehandle
call CloseFile

ret
closeAdminFile ENDP

;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;write admin file;;;;;;;;;;;;

writeAdminFile PROC

mov filehandle , eax;
mov edx , offset buffer;
mov ecx , sizeof buffer;
call writetofile;

ret
writeAdminFile ENDP
;;;;;;;;;;;;;;;;;;;;;;;;;;;;
end main
